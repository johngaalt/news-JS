(()=>{"use strict";var e={930:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([e.id,'.news__item{display:flex;flex-direction:column;margin:1rem auto;margin-bottom:1.6%;background:#fff;color:#333;line-height:1.4;font-family:Arial,sans-serif;border-radius:5px;overflow:hidden}.news__item:hover .news__meta-photo{transform:scale(1.3) rotate(3deg)}.news__item .news__meta{position:relative;height:200px}.news__item .news__meta-photo{position:absolute;top:0;right:0;bottom:0;left:0;background-size:cover;background-position:center;transition:transform .2s}.news__item .news__meta-details,.news__item .news__meta-details ul{margin:auto;padding:0;list-style:none}.news__item .news__meta-details{position:absolute;top:0;bottom:0;left:-120%;margin:auto;transition:left .2s;background:rgba(0,0,0,.6);color:#fff;padding:10px;width:100%;font-size:.9rem}.news__item .news__description{padding:1rem;background:#fff;position:relative;z-index:1}.news__item .news__description h2{line-height:1;margin:0;font-size:1.7rem}.news__item .news__description h3{font-size:1rem;font-weight:300;text-transform:uppercase;color:#a2a2a2;margin-top:5px}.news__item .news__description .news__read-more{text-align:right}.news__item .news__description .news__read-more a{color:#5ad67d;display:inline-block;position:relative;text-decoration:none;font-weight:800}.news__item .news__description .news__read-more a:after{content:"→";margin-left:-10px;opacity:0;vertical-align:middle;transition:margin .3s,opacity .3s}.news__item .news__description .news__read-more a:hover:after{margin-left:5px;opacity:1}.news__item p{margin:1rem 0 0}.news__item p:first-of-type{margin-top:1.25rem;position:relative}.news__item p:first-of-type:before{content:"";position:absolute;height:5px;background:#5ad67d;width:35px;top:-0.75rem;border-radius:3px}.news__item:hover .news__meta-details{left:0%}@media(min-width: 640px){.news__item{flex-direction:row;max-width:700px}.news__item .news__meta{flex-basis:40%;height:auto}.news__item .news__description{flex-basis:60%}.news__item .news__description:before{-webkit-transform:skewX(-3deg);transform:skewX(-3deg);content:"";background:#fff;width:30px;position:absolute;left:-10px;top:0;bottom:0;z-index:-1}.news__item.alt{flex-direction:row-reverse}.news__item.alt .news__description:before{left:inherit;right:-10px;-webkit-transform:skew(3deg);transform:skew(3deg)}.news__item.alt .news__meta-details{padding-left:25px}}',"",{version:3,sources:["webpack://./src/components/view/news/news.scss"],names:[],mappings:"AAAA,YAAA,YACI,CAAA,qBACA,CAAA,gBACA,CAAA,kBACA,CAAA,eACA,CAAA,UACA,CAAA,eACA,CAAA,4BACA,CAAA,iBACA,CAAA,eACA,CAAA,oCAGJ,iCACI,CAAA,wBAGJ,iBACI,CAAA,YACA,CAAA,8BAGJ,iBACI,CAAA,KACA,CAAA,OACA,CAAA,QACA,CAAA,MACA,CAAA,qBACA,CAAA,0BACA,CAAA,wBACA,CAAA,mEAGJ,WAEI,CAAA,SACA,CAAA,eACA,CAAA,gCAGJ,iBACI,CAAA,KACA,CAAA,QACA,CAAA,UACA,CAAA,WACA,CAAA,mBACA,CAAA,yBACA,CAAA,UACA,CAAA,YACA,CAAA,UACA,CAAA,eACA,CAAA,+BAGJ,YACI,CAAA,eACA,CAAA,iBACA,CAAA,SACA,CAAA,kCAGJ,aACI,CAAA,QACA,CAAA,gBACA,CAAA,kCAGJ,cACI,CAAA,eACA,CAAA,wBACA,CAAA,aACA,CAAA,cACA,CAAA,gDAGJ,gBACI,CAAA,kDAGJ,aACI,CAAA,oBACA,CAAA,iBACA,CAAA,oBACA,CAAA,eACA,CAAA,wDAGJ,WACI,CAAA,iBACA,CAAA,SACA,CAAA,qBACA,CAAA,iCACA,CAAA,8DAGJ,eACI,CAAA,SACA,CAAA,cAGJ,eACI,CAAA,4BAGJ,kBACI,CAAA,iBACA,CAAA,mCAGJ,UACI,CAAA,iBACA,CAAA,UACA,CAAA,kBACA,CAAA,UACA,CAAA,YACA,CAAA,iBACA,CAAA,sCAGJ,OACI,CAAA,yBAGJ,YACI,kBACI,CAAA,eACA,CAAA,wBAGJ,cACI,CAAA,WACA,CAAA,+BAGJ,cACI,CAAA,sCAGJ,8BACI,CAAA,sBACA,CAAA,UACA,CAAA,eACA,CAAA,UACA,CAAA,iBACA,CAAA,UACA,CAAA,KACA,CAAA,QACA,CAAA,UACA,CAAA,gBAGJ,0BACI,CAAA,0CAGJ,YACI,CAAA,WACA,CAAA,4BACA,CAAA,oBACA,CAAA,oCAGJ,iBACI,CAAA",sourcesContent:[".news__item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 1rem auto;\r\n    margin-bottom: 1.6%;\r\n    background: #fff;\r\n    color: #333;\r\n    line-height: 1.4;\r\n    font-family: Arial, sans-serif;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n}\r\n\r\n.news__item:hover .news__meta-photo {\r\n    transform: scale(1.3) rotate(3deg);\r\n}\r\n\r\n.news__item .news__meta {\r\n    position: relative;\r\n    height: 200px;\r\n}\r\n\r\n.news__item .news__meta-photo {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-size: cover;\r\n    background-position: center;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n.news__item .news__meta-details,\r\n.news__item .news__meta-details ul {\r\n    margin: auto;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.news__item .news__meta-details {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -120%;\r\n    margin: auto;\r\n    transition: left 0.2s;\r\n    background: rgba(0, 0, 0, 0.6);\r\n    color: #fff;\r\n    padding: 10px;\r\n    width: 100%;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.news__item .news__description {\r\n    padding: 1rem;\r\n    background: #fff;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.news__item .news__description h2 {\r\n    line-height: 1;\r\n    margin: 0;\r\n    font-size: 1.7rem;\r\n}\r\n\r\n.news__item .news__description h3 {\r\n    font-size: 1rem;\r\n    font-weight: 300;\r\n    text-transform: uppercase;\r\n    color: #a2a2a2;\r\n    margin-top: 5px;\r\n}\r\n\r\n.news__item .news__description .news__read-more {\r\n    text-align: right;\r\n}\r\n\r\n.news__item .news__description .news__read-more a {\r\n    color: #5ad67d;\r\n    display: inline-block;\r\n    position: relative;\r\n    text-decoration: none;\r\n    font-weight: 800;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:after {\r\n    content: '→';\r\n    margin-left: -10px;\r\n    opacity: 0;\r\n    vertical-align: middle;\r\n    transition: margin 0.3s, opacity 0.3s;\r\n}\r\n\r\n.news__item .news__description .news__read-more a:hover:after {\r\n    margin-left: 5px;\r\n    opacity: 1;\r\n}\r\n\r\n.news__item p {\r\n    margin: 1rem 0 0;\r\n}\r\n\r\n.news__item p:first-of-type {\r\n    margin-top: 1.25rem;\r\n    position: relative;\r\n}\r\n\r\n.news__item p:first-of-type:before {\r\n    content: '';\r\n    position: absolute;\r\n    height: 5px;\r\n    background: #5ad67d;\r\n    width: 35px;\r\n    top: -0.75rem;\r\n    border-radius: 3px;\r\n}\r\n\r\n.news__item:hover .news__meta-details {\r\n    left: 0%;\r\n}\r\n\r\n@media (min-width: 640px) {\r\n    .news__item {\r\n        flex-direction: row;\r\n        max-width: 700px;\r\n    }\r\n\r\n    .news__item .news__meta {\r\n        flex-basis: 40%;\r\n        height: auto;\r\n    }\r\n\r\n    .news__item .news__description {\r\n        flex-basis: 60%;\r\n    }\r\n\r\n    .news__item .news__description:before {\r\n        -webkit-transform: skewX(-3deg);\r\n        transform: skewX(-3deg);\r\n        content: '';\r\n        background: #fff;\r\n        width: 30px;\r\n        position: absolute;\r\n        left: -10px;\r\n        top: 0;\r\n        bottom: 0;\r\n        z-index: -1;\r\n    }\r\n\r\n    .news__item.alt {\r\n        flex-direction: row-reverse;\r\n    }\r\n\r\n    .news__item.alt .news__description:before {\r\n        left: inherit;\r\n        right: -10px;\r\n        -webkit-transform: skew(3deg);\r\n        transform: skew(3deg);\r\n    }\r\n\r\n    .news__item.alt .news__meta-details {\r\n        padding-left: 25px;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const s=A},145:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([e.id,'.sources{display:flex;flex-wrap:wrap;width:100%;height:140px;overflow:auto;align-items:center;font:300 1em "Fira Sans",sans-serif}@media(max-width: 860px){.sources{height:200px;flex-wrap:wrap}}@media(max-width: 500px){.sources{height:260px}}.source__item{background:none;border:2px solid #fff;font:inherit;line-height:1;margin:.5em;padding:1em 2em;color:#fff;transition:.25s;cursor:pointer;border-radius:7px}@media(max-width: 860px){.source__item{padding:.8em 1.6em;font-size:.8em}}@media(max-width: 500px){.source__item{padding:.5em 1.1em;font-size:.7em}}.source__item:hover,.source__item:focus{border-color:#000;color:#000;box-shadow:0 .5em .5em -0.4em #000;transform:translateY(-0.25em)}.source__item-name{font-weight:400;white-space:nowrap}',"",{version:3,sources:["webpack://./src/components/view/sources/sources.scss","webpack://./src/mixins.scss"],names:[],mappings:"AAEA,SACI,YAAA,CACA,cAAA,CACA,UAAA,CACA,YAAA,CACA,aAAA,CACA,kBAAA,CACA,mCAAA,CCKF,yBDZF,SAUQ,YAAA,CACA,cAAA,CAAA,CCPN,yBDJF,SAeQ,YAAA,CAAA,CAIR,cACI,eAAA,CACA,qBAAA,CACA,YAAA,CACA,aAAA,CACA,WAAA,CACA,eAAA,CACA,UAAA,CACA,eAAA,CACA,cAAA,CACA,iBAAA,CCjBF,yBDOF,cAaQ,kBAAA,CACA,cAAA,CAAA,CC7BN,yBDeF,cAkBQ,kBAAA,CACA,cAAA,CAAA,CAIR,wCAEI,iBAAA,CACA,UAAA,CACA,kCAAA,CACA,6BAAA,CAGJ,mBACI,eAAA,CACA,kBAAA",sourcesContent:["@import '/src/mixins.scss';\r\n\r\n.sources {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 140px;\r\n    overflow: auto;\r\n    align-items: center;\r\n    font: 300 1em 'Fira Sans', sans-serif;\r\n\r\n    @include for-tablet {\r\n        height: 200px;\r\n        flex-wrap: wrap;\r\n    }\r\n\r\n    @include for-mobile {\r\n        height: 260px;\r\n    }\r\n}\r\n\r\n.source__item {\r\n    background: none;\r\n    border: 2px solid white;\r\n    font: inherit;\r\n    line-height: 1;\r\n    margin: 0.5em;\r\n    padding: 1em 2em;\r\n    color: white;\r\n    transition: 0.25s;\r\n    cursor: pointer;\r\n    border-radius: 7px;\r\n\r\n    @include for-tablet {\r\n        padding: 0.8em 1.6em;\r\n        font-size: 0.8em;\r\n    }\r\n\r\n    @include for-mobile {\r\n        padding: 0.5em 1.1em;\r\n        font-size: 0.7em;\r\n    }\r\n}\r\n\r\n.source__item:hover,\r\n.source__item:focus {\r\n    border-color: black;\r\n    color: black;\r\n    box-shadow: 0 0.5em 0.5em -0.4em black;\r\n    transform: translateY(-0.25em);\r\n}\r\n\r\n.source__item-name {\r\n    font-weight: 400;\r\n    white-space: nowrap;\r\n}\r\n","$breakpoint-mobile: 500px; // 320px\n$breakpoint-tablet: 860px; // 768px\n$breakpoint-desktop: 1280px; // 1280px\n\n\n@mixin for-mobile {\n  @media (max-width: $breakpoint-mobile) {\n    @content;\n  }\n}\n\n\n\n@mixin for-tablet {\n  @media (max-width: $breakpoint-tablet) {\n    @content;\n  }\n}\n\n@mixin for-desktop {\n  @media (min-width: $breakpoint-small-desktop) {\n    @content;\n  }\n}\n\n@mixin inner-section($padding) {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: $padding;\n}\n\n@mixin background-options($background-color) {\n  background: $background-color;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n}"],sourceRoot:""}]);const s=A},525:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([e.id,'body{color:#fff;background:#a6a6a3;font-family:sans-serif}ul,li{list-style-type:none;margin:0;padding:0}a{text-decoration:none;color:#444}header{padding:10px 30px}header h1{font-size:45px;font-weight:800}@media(max-width: 860px){header h1{font-size:40px}}@media(max-width: 500px){header h1{font-size:36px}}footer{display:flex;align-items:center;justify-content:center}.container{display:flex;align-items:center;justify-content:space-between;font-size:20px;width:50%}.container a{transition:.5s}@media(max-width: 860px){.container{width:70%;font-size:16px}}@media(max-width: 500px){.container{width:90%;font-size:14px}}.container .github a:hover{color:#fff}.container .logo{width:100px}@media(max-width: 860px){.container .logo{width:60px}}@media(max-width: 500px){.container .logo{width:50px}}.container .logo:hover{transform:scale(1.05)}.container .year{color:#444}footer .copyright{color:#333;text-align:center}footer .copyright a{color:#444}footer .container a:hover{color:#fff}footer .copyright:before{content:"©"}',"",{version:3,sources:["webpack://./src/global.scss","webpack://./src/mixins.scss"],names:[],mappings:"AAAA,KAEA,UACI,CAAA,kBACA,CAAA,sBACA,CAAA,MAGJ,oBAEI,CAAA,QACA,CAAA,SACA,CAAA,EAGJ,oBACI,CAAA,UACA,CAAA,OAGJ,iBACI,CAAA,UAGJ,cACI,CAAA,eACA,CAAA,yBCZF,UDUF,cAKQ,CAAA,CAAA,yBCvBN,UDkBF,cASQ,CAAA,CAAA,OAIR,YACI,CAAA,kBACA,CAAA,sBACA,CAAA,WAGJ,YACI,CAAA,kBACA,CAAA,6BACA,CAAA,cACA,CAAA,SACA,CAAA,aAEA,cACI,CAAA,yBCrCN,WD6BF,SAYQ,CAAA,cACA,CAAA,CAAA,yBClDN,WDqCF,SAiBQ,CAAA,cACA,CAAA,CAAA,2BAGJ,UACI,CAAA,iBAGJ,WACI,CAAA,yBCvDN,iBDsDE,UAKQ,CAAA,CAAA,yBCnEV,iBD8DE,UASQ,CAAA,CAAA,uBAIR,qBACI,CAAA,iBAGJ,UACI,CAAA,kBAIR,UACI,CAAA,iBACA,CAAA,oBAGJ,UACI,CAAA,0BAGJ,UACI,CAAA,yBAGJ,WACI",sourcesContent:["@import './mixins.scss';\r\n\r\nbody {\r\n    color: #fff;\r\n    background: #A6A6A3;\r\n    font-family: sans-serif;\r\n}\r\n\r\nul,\r\nli {\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n    color: #444;\r\n}\r\n\r\nheader {\r\n    padding: 10px 30px;\r\n}\r\n\r\nheader h1 {\r\n    font-size: 45px;\r\n    font-weight: 800;\r\n\r\n    @include for-tablet {\r\n        font-size: 40px;\r\n    }\r\n\r\n    @include for-mobile {\r\n        font-size: 36px;\r\n    }\r\n}\r\n\r\nfooter {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    font-size: 20px;\r\n    width: 50%;\r\n\r\n    a {\r\n        transition: 0.5s;\r\n    }\r\n\r\n    @include for-tablet {\r\n        width: 70%;\r\n        font-size: 16px;\r\n    }\r\n\r\n    @include for-mobile {\r\n        width: 90%;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .github a:hover {\r\n        color: white;\r\n    }\r\n\r\n    .logo {\r\n        width: 100px;\r\n        \r\n\r\n        @include for-tablet {\r\n            width: 60px;\r\n        }\r\n\r\n        @include for-mobile {\r\n            width: 50px;\r\n        }\r\n    }\r\n\r\n    .logo:hover {\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    .year {\r\n        color: #444;\r\n    }\r\n}\r\n\r\nfooter .copyright {\r\n    color: #333;\r\n    text-align: center;\r\n}\r\n\r\nfooter .copyright a {\r\n    color: #444;\r\n}\r\n\r\nfooter .container a:hover {\r\n    color: white;\r\n}\r\n\r\nfooter .copyright:before {\r\n    content: '©';\r\n}\r\n","$breakpoint-mobile: 500px; // 320px\n$breakpoint-tablet: 860px; // 768px\n$breakpoint-desktop: 1280px; // 1280px\n\n\n@mixin for-mobile {\n  @media (max-width: $breakpoint-mobile) {\n    @content;\n  }\n}\n\n\n\n@mixin for-tablet {\n  @media (max-width: $breakpoint-tablet) {\n    @content;\n  }\n}\n\n@mixin for-desktop {\n  @media (min-width: $breakpoint-small-desktop) {\n    @content;\n  }\n}\n\n@mixin inner-section($padding) {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: $padding;\n}\n\n@mixin background-options($background-color) {\n  background: $background-color;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n}"],sourceRoot:""}]);const s=A},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var A={};if(r)for(var s=0;s<this.length;s++){var a=this[s][0];null!=a&&(A[a]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&A[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},153:(e,n,t)=>{t.r(n),t.d(n,{default:()=>_});var r=t(379),o=t.n(r),i=t(795),A=t.n(i),s=t(569),a=t.n(s),c=t(565),d=t.n(c),l=t(216),p=t.n(l),u=t(589),m=t.n(u),C=t(930),f={};f.styleTagTransform=m(),f.setAttributes=d(),f.insert=a().bind(null,"head"),f.domAPI=A(),f.insertStyleElement=p(),o()(C.Z,f);const _=C.Z&&C.Z.locals?C.Z.locals:void 0},815:(e,n,t)=>{t.r(n),t.d(n,{default:()=>_});var r=t(379),o=t.n(r),i=t(795),A=t.n(i),s=t(569),a=t.n(s),c=t(565),d=t.n(c),l=t(216),p=t.n(l),u=t(589),m=t.n(u),C=t(145),f={};f.styleTagTransform=m(),f.setAttributes=d(),f.insert=a().bind(null,"head"),f.domAPI=A(),f.insertStyleElement=p(),o()(C.Z,f);const _=C.Z&&C.Z.locals?C.Z.locals:void 0},690:(e,n,t)=>{t.r(n),t.d(n,{default:()=>_});var r=t(379),o=t.n(r),i=t(795),A=t.n(i),s=t(569),a=t.n(s),c=t(565),d=t.n(c),l=t(216),p=t.n(l),u=t(589),m=t.n(u),C=t(525),f={};f.styleTagTransform=m(),f.setAttributes=d(),f.insert=a().bind(null,"head"),f.domAPI=A(),f.insertStyleElement=p(),o()(C.Z,f);const _=C.Z&&C.Z.locals?C.Z.locals:void 0},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},A=[],s=0;s<e.length;s++){var a=e[s],c=r.base?a[0]+r.base:a[0],d=i[c]||0,l="".concat(c," ").concat(d);i[c]=d+1;var p=t(l),u={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=o(u,r);r.byIndex=s,n.splice(s,0,{identifier:l,updater:m,references:1})}A.push(l)}return A}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var A=0;A<i.length;A++){var s=t(i[A]);n[s].references--}for(var a=r(e,o),c=0;c<i.length;c++){var d=t(i[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=a}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},717:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(842)),i=t(527);n.default=class{constructor(){this.controller=new o.default,this.view=new i.AppView}start(){const e=document.querySelector(".sources");e&&(e.addEventListener("click",(e=>this.controller.getNews(e,(e=>this.view.drawNews(e))))),this.controller.getSources((e=>this.view.drawSources(e))))}}},853:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(24));class i extends o.default{constructor(){super("https://rss-news-api.onrender.com/",{apiKey:"da412dadd3024699bbd9f126281e9090"})}}n.default=i},842:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(853));class i extends o.default{getSources(e){super.getResp({endpoint:"sources"},e)}getNews(e,n){let t=e.target;const r=e.currentTarget;for(;t!==r;)if(t&&r&&t instanceof Element&&r instanceof Element){if(t.classList.contains("source__item")){const e=t.getAttribute("data-source-id"),o=r.getAttribute("data-source");return void(e&&o!==e&&(r.setAttribute("data-source",e),super.getResp({endpoint:"everything",options:{sources:e}},n)))}t=t.parentNode}}}n.default=i},24:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=class{constructor(e,n){this.baseLink=e,this.options=n}getResp({endpoint:e,options:n={}},t=(()=>{console.error("No callback for GET response")})){this.load("GET",e,t,n)}errorHandler(e){if(!e.ok)throw 401!==e.status&&404!==e.status||console.log(`Sorry, but there is ${e.status} error: ${e.statusText}`),Error(e.statusText);return e}makeUrl(e,n){const t=Object.assign(Object.assign({},this.options),e);let r=`${this.baseLink}${n}?`;return Object.keys(t).forEach((e=>{r+=`${e}=${t[e]}&`})),r.slice(0,-1)}load(e,n,t,r={}){fetch(this.makeUrl(r,n),{method:e}).then(this.errorHandler).then((e=>e.json())).then((e=>t(e))).catch((e=>console.error(e)))}}},22:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.default=class{static setTextContent(e,n,t){const r=e.querySelector(n);r&&(r.textContent=t)}static setBackgroundImage(e,n,t){const r=e.querySelector(n);r&&(r.style.backgroundImage=t)}static setAttribute(e,n,t,r){const o=e.querySelector(n);o&&o.setAttribute(t,r)}}},527:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.AppView=void 0;const o=r(t(798)),i=r(t(53));class A{constructor(){this.news=new o.default,this.sources=new i.default}drawNews(e){const n=(null==e?void 0:e.articles)?null==e?void 0:e.articles:[];this.news.draw(n)}drawSources(e){const n=(null==e?void 0:e.sources)?null==e?void 0:e.sources:[];this.sources.draw(n)}}n.AppView=A,n.default=A},798:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(22));var i;t(153),function(e){e.Item=".news__item",e.Photo=".news__meta-photo",e.Author=".news__meta-author",e.Date=".news__meta-date",e.Title=".news__description-title",e.Source=".news__description-source",e.Content=".news__description-content",e.ReadMore=".news__read-more a"}(i||(i={})),n.default=class{draw(e){const n=e.length>=10?e.filter(((e,n)=>n<10)):e,t=document.createDocumentFragment(),r=document.querySelector("#newsItemTemp");n.forEach(((e,n)=>{var A;if(r&&r instanceof HTMLTemplateElement){const s=r.content.cloneNode(!0);n%2&&(null===(A=s.querySelector(i.Item))||void 0===A||A.classList.add("alt")),o.default.setBackgroundImage(s,i.Photo,`url(${e.urlToImage||"img/news_placeholder.jpg"})`),o.default.setTextContent(s,i.Author,e.author||e.source.name),o.default.setTextContent(s,i.Date,e.publishedAt.slice(0,10).split("-").reverse().join("-")),o.default.setTextContent(s,i.Title,e.title),o.default.setTextContent(s,i.Source,e.source.name),o.default.setTextContent(s,i.Content,e.description),o.default.setAttribute(s,i.ReadMore,"href",e.url),t.append(s)}}));const A=document.querySelector(".news");null!==A&&(A.innerHTML="",A.appendChild(t))}}},53:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(22));var i;t(815),function(e){e.ItemName=".source__item-name",e.Item=".source__item"}(i||(i={})),n.default=class{draw(e){const n=document.createDocumentFragment(),t=document.querySelector("#sourceItemTemp");e.forEach((e=>{const r=null==t?void 0:t.content.cloneNode(!0);r&&(o.default.setTextContent(r,i.ItemName,e.name),o.default.setAttribute(r,i.Item,"data-source-id",e.id),n.append(r))}));const r=document.querySelector(".sources");null!==r&&r.append(n)}}},607:function(e,n,t){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const o=r(t(717));t(690),(new o.default).start()}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.nc=void 0,t(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,